exports.up = async (knex) => {
  await knex.schema
    .createTable('users', tbl => {
      tbl.increments()
      tbl.string('username', 200).notNullable()
      tbl.string('password', 200).notNullable()
      tbl.string('name', 320).notNullable()
      tbl.string('email', 320).unique().notNullable()
      tbl.string('role').notNullable().defaultTo('client')
      tbl.timestamps(false, true)
    })
    .createTable('class', tbl => {
      tbl.increments()
      tbl.string('instructorName', 200).notNullable()
      tbl.string('className', 200).unique().notNullable()
      tbl.string('classType', 320).notNullable()
      tbl.string('location', 350).notNullable()
      tbl.string('date').notNullable()
      tbl.integer('maximumSize').notNullable()
      tbl.float('duration').notNullable()
    })
    .createTable('instructor', tbl => {
      tbl.increments()
      tbl.integer('users_id')
         .unsigned()
         .notNullable()
         .references('id')
         .inTable('users')
         .onUpdate('CASCADE')
         .onDelete('CASCADE')
      tbl.integer('class_id')
         .unsigned()
         .notNullable()
         .references('id')
         .inTable('class')
         .onUpdate('CASCADE')
         .onDelete('CASCADE')
    })
    .createTable('signupClass', tbl => {
      tbl.increments()
      tbl.integer('users_id')
         .unsigned()
         .notNullable()
         .references('id')
         .inTable('users')
         .onUpdate('CASCADE')
         .onDelete('CASCADE')
      tbl.integer('class_id')
         .unsigned()
         .notNullable()
         .references('id')
         .inTable('class')
         .onUpdate('CASCADE')
         .onDelete('CASCADE')
    })
}

exports.down = async (knex) => {
  await knex.schema.dropTableIfExists('signupClass')
                   .dropTableIfExists('instructor')
                   .dropTableIfExists('class')
                   .dropTableIfExists('users')
}
